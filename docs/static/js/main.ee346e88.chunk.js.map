{"version":3,"sources":["components/Router.tsx","store/selectors.ts","store/actionCreators.ts","api/types.ts","api/sendRequest.ts","api/getAbi.ts","api/getTransaction.ts","api/getBlock.ts","api/getInfo.ts","api/index.ts","store/index.ts","store/actions.ts","store/reducer.ts","store/saga.ts","components/LoadingPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["RouteType","ChainTab","homeRoute","type","Home","BlockTab","chainRoute","host","tab","Chain","blockRoute","num","Block","accountRoute","account","action","Account","getRouteTemplate","routeType","Transaction","getRouteString","route","hash","id","toHashId","str","toLowerCase","replace","getChainState","state","getIsPlaying","api","data","isPlaying","getSelectedBlock","selectedBlock","getSelectedAccount","selectedAccount","getBlock","selected","result","latest","latestBlocks","i","length","block","getUrl","url","getInfo","info","createPlayBlocks","actions","PlayBlocks","createPauseBlocks","PauseBlocks","createPushBlock","PushBlock","createSelectAccount","SelectAccount","createSelectBlock","SelectBlock","createSetInfo","SetInfo","createSetSelectedBlock","SetSelectedBlock","createSetSelectedAccount","SetSelectedAccount","RpcErrorType","ResultType","resultOk","Ok","isOk","isErr","Err","resultErr","error","sendRequest","input","init","a","fetch","res","Unreachable","ok","BadStatus","status","json","InvalidJson","UnexpectedData","getAbi","serverUrl","accountName","signal","URL","toString","method","body","JSON","stringify","account_name","isDeferred","trx","String","getTransactionId","getNumActionsInTransaction","transaction","context_free_actions","getActionsInTransaction","concat","map","blockNum","block_num_or_id","getNumActionsInBlock","transactions","reduce","sum","getActionsInBlock","store","sagaMiddleware","createSagaMiddleware","innerStore","createStore","reducer","composeWithDevTools","name","applyMiddleware","run","saga","useDispatch","useDispatchInner","useSelector","selector","equalityFn","useSelectorInner","ActionType","hasSameUrl","onPlayBlocks","onPauseBlocks","unshift","pop","onPushBlock","undefined","onSelectAccount","onSelectBlock","onSetInfo","onSetSelectedAccount","onSetSelectedBlock","hostname","getInfoIfNecessary","playBlocksFlow","take","call","put","select","selectors","previousUrl","fork","head_block_num","task","cancel","headBlockNum","controller","AbortController","delay","abort","abi","Component","Fade","in","timeout","Grid","container","justify","alignItems","Box","py","CircularProgress","style","width","height","color","HomePage","React","lazy","ChainPage","BlockPage","AccountPage","TransactionPage","NotFoundPage","App","Suspense","fallback","LoadingPage","Router","exact","component","path","CssBaseline","isLocalhost","Boolean","window","location","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","process","href","origin","addEventListener","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee346e88.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link as LinkInner } from 'react-router-dom'\r\nimport * as api from '../api'\r\n\r\nexport type RouteParams =\r\n  | HomeRouteParams\r\n  | ChainRouteParams\r\n  | BlockRouteParams\r\n  | AccountRouteParams\r\n  | TransactionRouteParams\r\n\r\nexport enum RouteType {\r\n  Home = 'HOME',\r\n  Chain = 'CHAIN',\r\n  Block = 'BLOCK',\r\n  Account = 'ACCOUNT',\r\n  Transaction = 'TRANSACTION',\r\n}\r\n\r\nexport interface HomeRouteParams {\r\n  readonly type: RouteType.Home\r\n}\r\n\r\nexport const homeRoute = (): HomeRouteParams => ({ type: RouteType.Home })\r\n\r\nexport interface ChainRouteParams {\r\n  readonly type: RouteType.Chain\r\n  readonly host: string\r\n  readonly tab: ChainTab | void\r\n}\r\n\r\nexport enum ChainTab {\r\n  Blocks = 0,\r\n  Actions = 1,\r\n  Transactions = 2,\r\n}\r\n\r\nexport const chainRoute = (host: string, tab?: ChainTab): ChainRouteParams => ({\r\n  type: RouteType.Chain,\r\n  host,\r\n  tab,\r\n})\r\n\r\nexport interface BlockRouteParams {\r\n  readonly type: RouteType.Block\r\n  readonly host: string\r\n  readonly num: api.BlockNum\r\n  readonly tab: BlockTab | void\r\n}\r\n\r\nexport enum BlockTab {\r\n  Actions = 0,\r\n  Transactions = 1,\r\n  Raw = 2,\r\n}\r\n\r\nexport const blockRoute = (\r\n  host: string,\r\n  num: api.BlockNum,\r\n  tab?: BlockTab,\r\n): BlockRouteParams => ({\r\n  type: RouteType.Block,\r\n  host,\r\n  num,\r\n  tab,\r\n})\r\n\r\nexport interface AccountRouteParams {\r\n  readonly type: RouteType.Account\r\n  readonly host: string\r\n  readonly account: string\r\n  readonly action?: string | void\r\n}\r\n\r\nexport const accountRoute = (\r\n  host: string,\r\n  account: api.AccountName,\r\n  action?: api.ActionName | void,\r\n): AccountRouteParams => ({\r\n  type: RouteType.Account,\r\n  host,\r\n  account,\r\n  action,\r\n})\r\n\r\nexport interface TransactionRouteParams {\r\n  readonly type: RouteType.Transaction\r\n  readonly host: string\r\n  readonly id: api.TransactionId\r\n}\r\n\r\nexport const transactionRoute = (\r\n  host: string,\r\n  id: api.TransactionId,\r\n): TransactionRouteParams => ({\r\n  type: RouteType.Transaction,\r\n  host,\r\n  id,\r\n})\r\n\r\nexport function getRouteTemplate(routeType: RouteType): string {\r\n  switch (routeType) {\r\n  case RouteType.Home:\r\n    return '/'\r\n  case RouteType.Chain:\r\n    return '/:host'\r\n  case RouteType.Block:\r\n    return '/:host/block/:num'\r\n  case RouteType.Account:\r\n    return '/:host/account/:account'\r\n  case RouteType.Transaction:\r\n    return '/:host/transaction/:id'\r\n  }\r\n}\r\n\r\nexport function getRouteString(route: RouteParams): string {\r\n  switch (route.type) {\r\n  case RouteType.Home:\r\n    return '/'\r\n  case RouteType.Chain:\r\n    return `/${route.host}`\r\n  case RouteType.Block:\r\n    return `/${route.host}/block/${route.num}`\r\n  case RouteType.Account:\r\n    const hash = route.action ? `#${route.action}` : ''\r\n    return `/${route.host}/account/${route.account}${hash}`\r\n  case RouteType.Transaction:\r\n    return `/${route.host}/transaction/${route.id}`\r\n  }\r\n}\r\n\r\nexport function toHashId(str: string): string {\r\n  return str.toLowerCase().replace(/[\\W\\s]+/g, '-')\r\n}\r\n\r\nexport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\nexport const Link: React.FC<{\r\n  readonly to: Readonly<RouteParams>;\r\n  readonly className?: string;\r\n}> = ({ to, children, ...props }) => (\r\n  <LinkInner to={getRouteString(to)} {...props}>\r\n    {children}\r\n  </LinkInner>\r\n)\r\n","import * as api from '../api'\r\nimport { State, ChainState, Block, Account } from './state'\r\nimport * as chainPresets from '../chainPresets'\r\n\r\nexport function getPreset(state: State): chainPresets.ChainPreset | void {}\r\n\r\nexport function getChainState(state: State): api.Result<ChainState> | void {\r\n  return state\r\n}\r\n\r\nexport function getIsPlaying(state: State): boolean {\r\n  return state && api.isOk(state) ? state.data.isPlaying : false\r\n}\r\n\r\nexport function getSelectedBlock(state: State): Block | void {\r\n  if (state && api.isOk(state)) {\r\n    return state.data.selectedBlock\r\n  }\r\n}\r\n\r\nexport function getSelectedAccount(state: State): Account | void {\r\n  if (state && api.isOk(state)) {\r\n    return state.data.selectedAccount\r\n  }\r\n}\r\n\r\nexport function getBlock(\r\n  state: State,\r\n  num: api.BlockNum,\r\n): api.Result<api.Block> | void {\r\n  if (state && api.isOk(state)) {\r\n    // First see if it's selected\r\n    const selected = state.data.selectedBlock\r\n    if (selected && selected.num === num) {\r\n      return selected.result\r\n    }\r\n\r\n    // Look in the latest blocks\r\n    const latest = state.data.latestBlocks\r\n    for (let i = latest.length; i--; ) {\r\n      const block = latest[i]\r\n      if (block.num === num) {\r\n        return block.result\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getUrl(state: State): URL | void {\r\n  if (state && api.isOk(state)) {\r\n    return state.data.url\r\n  }\r\n}\r\n\r\nexport function getInfo(state: State): api.Info | void {\r\n  if (state && api.isOk(state)) {\r\n    return state.data.info\r\n  }\r\n}\r\n","import * as api from '../api'\r\nimport * as actions from './actions'\r\nimport * as state from './state'\r\n\r\nexport const createPlayBlocks = (url: URL): actions.PlayBlocks => ({\r\n  type: actions.ActionType.PlayBlocks,\r\n  url,\r\n})\r\n\r\nexport const createPauseBlocks = (): actions.PauseBlocks => ({\r\n  type: actions.ActionType.PauseBlocks,\r\n})\r\n\r\nexport const createPushBlock = (\r\n  url: URL,\r\n  num: api.BlockNum,\r\n  block: api.Result<api.Block>,\r\n): actions.PushBlock => ({\r\n  type: actions.ActionType.PushBlock,\r\n  url,\r\n  num,\r\n  block,\r\n})\r\n\r\nexport const createSelectAccount = (\r\n  url: URL,\r\n  account: api.AccountName,\r\n): actions.SelectAccount => ({\r\n  type: actions.ActionType.SelectAccount,\r\n  url,\r\n  account,\r\n})\r\n\r\nexport const createSelectBlock = (\r\n  url: URL,\r\n  num: api.BlockNum,\r\n): actions.SelectBlock => ({\r\n  type: actions.ActionType.SelectBlock,\r\n  url,\r\n  num,\r\n})\r\n\r\nexport const createSetInfo = (\r\n  url: URL,\r\n  info: api.Result<api.Info>,\r\n  isPlaying: boolean,\r\n): actions.SetInfo => ({\r\n  type: actions.ActionType.SetInfo,\r\n  url,\r\n  info,\r\n  isPlaying,\r\n})\r\n\r\nexport const createSetSelectedBlock = (\r\n  url: URL,\r\n  block: state.Block,\r\n): actions.SetSelectedBlock => ({\r\n  type: actions.ActionType.SetSelectedBlock,\r\n  url,\r\n  block,\r\n})\r\n\r\nexport const createSetSelectedAccount = (\r\n  url: URL,\r\n  account: state.Account,\r\n): actions.SetSelectedAccount => ({\r\n  type: actions.ActionType.SetSelectedAccount,\r\n  url,\r\n  account,\r\n})\r\n","/**\r\n * A simple wrapper to strengthen basic types\r\n * @see {@link https://codemix.com/opaque-types-in-javascript/}\r\n */\r\nexport type Opaque<K, T> = T & { readonly __TYPE__: K }\r\n\r\n/** Opaque type representing an EOSIO chain ID */\r\nexport type ChainId = Opaque<'ChainId', string>\r\n\r\n/** Opaque type representing an EOSIO block ID */\r\nexport type BlockId = Opaque<'BlockId', string>\r\n\r\n/** Opaque type representing an EOSIO block number */\r\nexport type BlockNum = Opaque<'BlockNum', number>\r\n\r\n/** Opaque type representing an EOSIO transaction ID */\r\nexport type TransactionId = Opaque<'TransactionId', string>\r\n\r\n/** Opaque type representing an EOSIO account name */\r\nexport type AccountName = Opaque<'AccountName', string>\r\n\r\n/** Opaque type representing an EOSIO action name */\r\nexport type ActionName = Opaque<'ActionName', string>\r\n\r\n/** Opaque type representing an EOSIO action name */\r\nexport type PermissionName = Opaque<'PermissionName', string>\r\n\r\nexport interface RawError {\r\n  readonly code: number\r\n  readonly error: Readonly<{\r\n    readonly code: number;\r\n    readonly details: ReadonlyArray<{\r\n      readonly file: Readonly<string>;\r\n      readonly line_number: Readonly<number>;\r\n      readonly message: Readonly<string>;\r\n      readonly method: Readonly<string>;\r\n    }>;\r\n    readonly name: Readonly<string>;\r\n    readonly what: Readonly<string>;\r\n  }>\r\n  readonly message: Readonly<string>\r\n}\r\n\r\nexport interface RpcError {\r\n  type: RpcErrorType\r\n  raw?: RawError\r\n}\r\n\r\nexport enum RpcErrorType {\r\n  Unreachable = 'UNREACHABLE',\r\n  NoCors = 'NO_CORS',\r\n  BadStatus = 'BAD_STATUS',\r\n  InvalidJson = 'INVALID_JSON',\r\n  UnexpectedData = 'UNEXPECTED_DATA',\r\n}\r\n\r\nexport type Result<T, E = RpcError> = ResultOk<T> | ResultErr<E>\r\n\r\nexport enum ResultType {\r\n  Ok = 'OK',\r\n  Err = 'ERR',\r\n}\r\n\r\nexport interface ResultOk<T> {\r\n  readonly type: ResultType.Ok\r\n  readonly data: T\r\n}\r\n\r\nexport const resultOk = <T>(data: T): ResultOk<T> => ({\r\n  type: ResultType.Ok,\r\n  data,\r\n})\r\n\r\nexport function isOk<T, E>(result: Result<T, E>): result is ResultOk<T> {\r\n  return result.type === ResultType.Ok\r\n}\r\n\r\nexport function isErr<T, E>(result: Result<T, E>): result is ResultErr<E> {\r\n  return result.type === ResultType.Err\r\n}\r\n\r\nexport interface ResultErr<E> {\r\n  readonly type: ResultType.Err\r\n  readonly error: E\r\n}\r\n\r\nexport const resultErr = <E>(error: E): ResultErr<E> => ({\r\n  type: ResultType.Err,\r\n  error,\r\n})\r\n","import * as api from './types'\r\n\r\nexport default async function sendRequest<T>(\r\n  input: RequestInfo,\r\n  init?: RequestInit,\r\n): Promise<api.Result<T>> {\r\n  // TODO make a HEAD call to check for CORS headers\r\n\r\n  let res: Response\r\n  try {\r\n    res = await fetch(input, init)\r\n  } catch (e) {\r\n    return api.resultErr({ type: api.RpcErrorType.Unreachable })\r\n  }\r\n\r\n  if (!res.ok) {\r\n    return api.resultErr({\r\n      type: api.RpcErrorType.BadStatus,\r\n      status: res.status,\r\n    })\r\n  }\r\n\r\n  // tslint:disable:no-any\r\n  // tslint:disable:no-unsafe-any\r\n  let json: any\r\n  try {\r\n    json = await res.json()\r\n  } catch (e) {\r\n    return api.resultErr({ type: api.RpcErrorType.InvalidJson })\r\n  }\r\n\r\n  if (!json || 'error' in json || 'code' in json) {\r\n    return api.resultErr({\r\n      type: api.RpcErrorType.UnexpectedData,\r\n      error: json as api.RawError,\r\n    })\r\n  } else {\r\n    return api.resultOk(json as T)\r\n  }\r\n}\r\n","import sendRequest from './sendRequest'\r\nimport * as api from './types'\r\n\r\nexport interface Abi {\r\n  readonly account_name: api.AccountName\r\n  readonly abi?: AbiInner\r\n}\r\n\r\nexport interface AbiInner {\r\n  readonly actions: AbiAction[]\r\n  readonly ricardian_clauses: RicardianClause[]\r\n}\r\n\r\nexport interface AbiAction {\r\n  readonly name: api.ActionName\r\n  readonly ricardian_contract?: string | void\r\n}\r\n\r\nexport interface RicardianClause {\r\n  readonly id: string\r\n  readonly body: string\r\n}\r\n\r\nexport function getAbi(\r\n  serverUrl: Readonly<URL>,\r\n  accountName: Readonly<api.AccountName>,\r\n  signal?: AbortSignal,\r\n): Promise<api.Result<Abi>> {\r\n  const url = new URL('/v1/chain/get_abi', serverUrl)\r\n  return sendRequest(url.toString(), {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      account_name: accountName,\r\n    }),\r\n    signal,\r\n  })\r\n}\r\n","import * as api from './types'\r\n\r\n/** Partial raw transaction data returned from `/v1/chain/get_block` endpoint */\r\nexport interface Transaction {\r\n  readonly status: string\r\n  readonly cpu_usage_us: number\r\n  readonly net_usage_words: number\r\n  readonly trx: api.TransactionId | Trx\r\n}\r\n\r\nexport interface Trx {\r\n  readonly id: api.TransactionId\r\n  readonly transaction: TransactionInner\r\n}\r\n\r\nexport interface TransactionInner {\r\n  readonly expiration: string\r\n  readonly context_free_actions: Action[]\r\n  readonly actions: Action[]\r\n}\r\n\r\nexport interface Action {\r\n  readonly account: api.AccountName\r\n  readonly name: api.ActionName\r\n  readonly data: object\r\n  readonly hex_data: string\r\n  readonly authorization: Authorization[]\r\n}\r\n\r\nexport interface Authorization {\r\n  readonly actor: api.AccountName\r\n  readonly permission: api.PermissionName\r\n}\r\n\r\nexport interface ActionWithTransactionId extends Action {\r\n  readonly id: api.TransactionId\r\n}\r\n\r\nexport function isDeferred(\r\n  trx: api.TransactionId | Trx,\r\n): trx is api.TransactionId {\r\n  return typeof trx === 'string' || trx instanceof String\r\n}\r\n\r\nexport function getTransactionId({ trx }: Transaction): api.TransactionId {\r\n  if (isDeferred(trx)) {\r\n    return trx\r\n  } else {\r\n    return trx.id\r\n  }\r\n}\r\n\r\nexport function getNumActionsInTransaction({ trx }: Transaction): number {\r\n  if (!isDeferred(trx)) {\r\n    return (\r\n      trx.transaction.context_free_actions.length +\r\n      trx.transaction.actions.length\r\n    )\r\n  } else {\r\n    return 0\r\n  }\r\n}\r\n\r\nexport function getActionsInTransaction({\r\n  trx,\r\n}: Transaction): ActionWithTransactionId[] {\r\n  if (!isDeferred(trx)) {\r\n    const id = trx.id\r\n    return trx.transaction.actions\r\n      .concat(trx.transaction.context_free_actions)\r\n      .map((action) => ({\r\n        ...action,\r\n        id,\r\n      }))\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n","import {\r\n  ActionWithTransactionId,\r\n  getActionsInTransaction,\r\n  getNumActionsInTransaction,\r\n  Transaction,\r\n} from './getTransaction'\r\nimport sendRequest from './sendRequest'\r\nimport * as api from './types'\r\n\r\nexport interface Block {\r\n  readonly id: api.BlockId\r\n  readonly block_num: api.BlockNum\r\n  readonly producer: api.AccountName\r\n  readonly timestamp: string\r\n  readonly transactions: Transaction[]\r\n}\r\n\r\nexport function getBlock(\r\n  serverUrl: Readonly<URL>,\r\n  blockNum: Readonly<api.BlockNum>,\r\n  signal?: AbortSignal,\r\n): Promise<api.Result<Block>> {\r\n  const url = new URL('/v1/chain/get_block', serverUrl)\r\n  return sendRequest(url.toString(), {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      block_num_or_id: blockNum,\r\n    }),\r\n    signal,\r\n  })\r\n}\r\n\r\nexport function getNumActionsInBlock(block: Block): number {\r\n  return block.transactions.reduce((sum: number, transaction) => {\r\n    return sum + getNumActionsInTransaction(transaction)\r\n  }, 0)\r\n}\r\n\r\nexport function getActionsInBlock(block: Block): ActionWithTransactionId[] {\r\n  return block.transactions.reduce(\r\n    (actions: ActionWithTransactionId[], transaction) => {\r\n      return actions.concat(getActionsInTransaction(transaction))\r\n    },\r\n    [],\r\n  )\r\n}\r\n","import sendRequest from './sendRequest'\r\nimport * as api from './types'\r\n\r\nexport interface Info {\r\n  readonly chain_id: api.ChainId\r\n  readonly head_block_num: api.BlockNum\r\n  readonly last_irreversible_block_num: api.BlockNum\r\n}\r\n\r\nexport function getInfo(serverUrl: URL): Promise<api.Result<Info>> {\r\n  const url = new URL('/v1/chain/get_info', serverUrl)\r\n  return sendRequest(url.toString())\r\n}\r\n","export * from './getAbi'\r\nexport * from './getBlock'\r\nexport * from './getInfo'\r\nexport * from './getTransaction'\r\nexport * from './types'\r\n","import { Store, Dispatch, createStore, applyMiddleware } from 'redux'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {\r\n  useDispatch as useDispatchInner,\r\n  useSelector as useSelectorInner,\r\n  useStore as useStoreInner,\r\n} from 'react-redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { Action } from './actions'\r\nimport { reducer } from './reducer'\r\nimport { saga } from './saga'\r\nimport { State } from './state'\r\n\r\nexport const store: Store<State, Action> = (() => {\r\n  const sagaMiddleware = createSagaMiddleware()\r\n  const innerStore = createStore(\r\n    reducer,\r\n    composeWithDevTools({ name: 'b1-test' })(applyMiddleware(sagaMiddleware)),\r\n  )\r\n  sagaMiddleware.run(saga)\r\n  return innerStore\r\n})()\r\n\r\nexport function useDispatch(): Dispatch<Action> {\r\n  return useDispatchInner<typeof store.dispatch>()\r\n}\r\n\r\nexport function useSelector<T>(\r\n  selector: (state: State) => T,\r\n  equalityFn?: (left: T, right: T) => boolean,\r\n): T {\r\n  return useSelectorInner(selector, equalityFn)\r\n}\r\n\r\nexport function useStore(): Store<State, Action> {\r\n  return useStoreInner()\r\n}\r\n\r\nexport function useState(): State {\r\n  return useSelector((s) => s)\r\n}\r\n\r\nexport * from './actions'\r\nexport * from './actionCreators'\r\nexport * from './selectors'\r\nexport * from './state'\r\n","import * as api from '../api'\r\nimport * as state from './state'\r\n\r\nexport type Action =\r\n  | PlayBlocks\r\n  | PauseBlocks\r\n  | PushBlock\r\n  | SelectAccount\r\n  | SelectBlock\r\n  | SetInfo\r\n  | SetSelectedAccount\r\n  | SetSelectedBlock\r\n\r\nexport enum ActionType {\r\n  PauseBlocks = 'PAUSE_BLOCKS',\r\n  PlayBlocks = 'PLAY_BLOCKS',\r\n  PushBlock = 'PUSH_BLOCK',\r\n  SelectAccount = 'SELECT_ACCOUNT',\r\n  SelectBlock = 'SELECT_BLOCK',\r\n  SetInfo = 'SET_INFO',\r\n  SetSelectedAccount = 'SET_SELECTED_ACCOUNT',\r\n  SetSelectedBlock = 'SET_SELECTED_BLOCK',\r\n}\r\n\r\nexport interface PauseBlocks {\r\n  readonly type: ActionType.PauseBlocks\r\n}\r\n\r\nexport interface PlayBlocks {\r\n  readonly type: ActionType.PlayBlocks\r\n  readonly url: URL\r\n}\r\n\r\nexport interface PushBlock {\r\n  readonly type: ActionType.PushBlock\r\n  readonly url: URL\r\n  readonly num: api.BlockNum\r\n  readonly block: api.Result<api.Block>\r\n}\r\n\r\nexport interface SelectAccount {\r\n  readonly type: ActionType.SelectAccount\r\n  readonly url: URL\r\n  readonly account: api.AccountName\r\n}\r\n\r\nexport interface SelectBlock {\r\n  readonly type: ActionType.SelectBlock\r\n  readonly url: URL\r\n  readonly num: api.BlockNum\r\n}\r\n\r\nexport interface SetInfo {\r\n  readonly type: ActionType.SetInfo\r\n  readonly url: URL\r\n  readonly info: api.Result<api.Info>\r\n  readonly isPlaying: boolean\r\n}\r\n\r\nexport interface SetSelectedAccount {\r\n  readonly type: ActionType.SetSelectedAccount\r\n  readonly url: URL\r\n  readonly account: state.Account\r\n}\r\n\r\nexport interface SetSelectedBlock {\r\n  readonly type: ActionType.SetSelectedBlock\r\n  readonly url: URL\r\n  readonly block: state.Block\r\n}\r\n","import * as api from '../api'\r\nimport {\r\n  Action,\r\n  ActionType,\r\n  PlayBlocks,\r\n  PauseBlocks,\r\n  PushBlock,\r\n  SetInfo,\r\n  SetSelectedAccount,\r\n  SetSelectedBlock,\r\n  SelectAccount,\r\n  SelectBlock,\r\n} from './actions'\r\nimport { State, ChainState } from './state'\r\nimport { getBlock } from './selectors'\r\n\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n  case ActionType.PlayBlocks:\r\n    return onPlayBlocks(state, action)\r\n  case ActionType.PauseBlocks:\r\n    return onPauseBlocks(state, action)\r\n  case ActionType.PushBlock:\r\n    return onPushBlock(state, action)\r\n  case ActionType.SelectAccount:\r\n    return onSelectAccount(state, action)\r\n  case ActionType.SelectBlock:\r\n    return onSelectBlock(state, action)\r\n  case ActionType.SetInfo:\r\n    return onSetInfo(state, action)\r\n  case ActionType.SetSelectedAccount:\r\n    return onSetSelectedAccount(state, action)\r\n  case ActionType.SetSelectedBlock:\r\n    return onSetSelectedBlock(state, action)\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nfunction hasSameUrl(state: api.ResultOk<ChainState>, url: URL): boolean {\r\n  return state.data.url.hostname === url.hostname\r\n}\r\n\r\nfunction onPlayBlocks(state: State, { url }: PlayBlocks): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    return api.resultOk({\r\n      ...state.data,\r\n      isPlaying: true,\r\n    })\r\n  }\r\n  // If the new URL is different from the old one then we return a blank state\r\n}\r\n\r\nfunction onPauseBlocks(state: State, action: PauseBlocks): State {\r\n  if (state && api.isOk(state)) {\r\n    return api.resultOk({\r\n      ...state.data,\r\n      isPlaying: false,\r\n    })\r\n  }\r\n  return state\r\n}\r\n\r\nfunction onPushBlock(state: State, { url, num, block }: PushBlock): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    const data = { ...state.data }\r\n\r\n    // Check if we already have this block\r\n    for (let i = data.latestBlocks.length; i--; ) {\r\n      const existing = data.latestBlocks[i]\r\n      if (existing.num === num) {\r\n        return state\r\n      }\r\n    }\r\n\r\n    data.latestBlocks.unshift({ num, result: block })\r\n    if (data.latestBlocks.length > 10) {\r\n      data.latestBlocks.pop()\r\n    }\r\n    return api.resultOk(data)\r\n  }\r\n}\r\n\r\nfunction onSelectAccount(state: State, { url, account }: SelectAccount): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    const selected = state.data.selectedAccount\r\n    if (selected && selected.name !== account) {\r\n      return api.resultOk({\r\n        ...state.data,\r\n        selectedAccount: undefined,\r\n      })\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nfunction onSelectBlock(state: State, { url, num }: SelectBlock): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    const selected = state.data.selectedBlock\r\n    if (!selected || (selected && selected.num !== num)) {\r\n      const block = getBlock(state, num)\r\n      if (block) {\r\n        return api.resultOk({\r\n          ...state.data,\r\n          selectedBlock: { num, result: block },\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return state\r\n}\r\n\r\nfunction onSetInfo(state: State, { url, info, isPlaying }: SetInfo): State {\r\n  if (api.isOk(info)) {\r\n    const data =\r\n      state && api.isOk(state) && hasSameUrl(state, url)\r\n        ? {\r\n          ...state.data,\r\n          info: info.data,\r\n          isPlaying,\r\n        }\r\n        : {\r\n          url,\r\n          info: info.data,\r\n          isPlaying,\r\n          latestBlocks: [],\r\n          selectedBlock: undefined,\r\n          selectedAccount: undefined,\r\n        }\r\n    return api.resultOk(data)\r\n  }\r\n  return info\r\n}\r\n\r\nfunction onSetSelectedAccount(\r\n  state: State,\r\n  { url, account }: SetSelectedAccount,\r\n): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    return api.resultOk({\r\n      ...state.data,\r\n      selectedAccount: account,\r\n    })\r\n  }\r\n  return state\r\n}\r\n\r\nfunction onSetSelectedBlock(\r\n  state: State,\r\n  { url, block }: SetSelectedBlock,\r\n): State {\r\n  if (state && api.isOk(state) && hasSameUrl(state, url)) {\r\n    return api.resultOk({\r\n      ...state.data,\r\n      selectedBlock: block,\r\n    })\r\n  }\r\n  return state\r\n}\r\n","import { put, delay, fork, cancel } from 'redux-saga/effects'\r\nimport { take, call, select } from 'typed-redux-saga'\r\nimport * as api from '../api'\r\nimport { ActionType, PlayBlocks, SelectAccount, SelectBlock } from './actions'\r\nimport {\r\n  createSetInfo,\r\n  createPushBlock,\r\n  createSetSelectedAccount,\r\n  createSetSelectedBlock,\r\n} from './actionCreators'\r\nimport * as selectors from './selectors'\r\n\r\nexport function* saga() {\r\n  while (true) {\r\n    const action = yield* take<PlayBlocks | SelectAccount | SelectBlock>([\r\n      ActionType.PlayBlocks,\r\n      ActionType.SelectAccount,\r\n      ActionType.SelectBlock,\r\n    ])\r\n\r\n    switch (action.type) {\r\n    case ActionType.PlayBlocks:\r\n      yield* onPlayBlocks(action)\r\n      break\r\n    case ActionType.SelectBlock:\r\n      yield* onSelectBlock(action)\r\n      break\r\n    case ActionType.SelectAccount:\r\n      yield* onSelectAccount(action)\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nfunction* getInfo(url: URL, isPlaying: boolean) {\r\n  const info = yield* call(api.getInfo, url)\r\n  yield put(createSetInfo(url, info, isPlaying))\r\n}\r\n\r\nfunction* getInfoIfNecessary(url: URL, isPlaying: boolean) {\r\n  const previousUrl = yield* select(selectors.getUrl)\r\n  if (!previousUrl || previousUrl.host !== url.host) {\r\n    yield* getInfo(url, isPlaying)\r\n  }\r\n}\r\n\r\nfunction* onPlayBlocks({ url }: PlayBlocks) {\r\n  yield* getInfo(url, true)\r\n\r\n  const info = yield* select(selectors.getInfo)\r\n  if (!info) {\r\n    return\r\n  }\r\n\r\n  const task = yield fork(playBlocksFlow, url, info.head_block_num)\r\n  yield* take(ActionType.PauseBlocks)\r\n  yield cancel(task)\r\n}\r\n\r\nexport function* playBlocksFlow(url: URL, headBlockNum: api.BlockNum) {\r\n  const controller = new AbortController()\r\n  try {\r\n    while (true) {\r\n      const block = yield* call(\r\n        api.getBlock,\r\n        url,\r\n        headBlockNum,\r\n        controller.signal,\r\n      )\r\n      yield put(createPushBlock(url, headBlockNum, block))\r\n      yield delay(500)\r\n      headBlockNum++\r\n    }\r\n  } finally {\r\n    controller.abort()\r\n  }\r\n}\r\n\r\nfunction* onSelectBlock({ url, num }: SelectBlock) {\r\n  yield* getInfoIfNecessary(url, false)\r\n  const selected = yield* select(selectors.getSelectedBlock)\r\n  if (!selected) {\r\n    const result = yield* call(api.getBlock, url, num)\r\n    yield put(createSetSelectedBlock(url, { num, result }))\r\n  }\r\n}\r\n\r\nfunction* onSelectAccount({ url, account }: SelectAccount) {\r\n  yield* getInfoIfNecessary(url, false)\r\n  const selected = yield* select(selectors.getSelectedAccount)\r\n  if (!selected) {\r\n    const abi = yield* call(api.getAbi, url, account)\r\n    yield put(createSetSelectedAccount(url, { name: account, abi }))\r\n  }\r\n}\r\n","import { Box, CircularProgress, Fade, Grid } from '@material-ui/core'\r\nimport React from 'react'\r\n\r\nconst Component: React.FC = () => {\r\n  return (\r\n    <Fade in={true} timeout={300}>\r\n      <Grid container={true} justify='center' alignItems='center'>\r\n        <Box py={15}>\r\n          <CircularProgress\r\n            style={{ width: 200, height: 200 }}\r\n            color='secondary'\r\n          />\r\n        </Box>\r\n      </Grid>\r\n    </Fade>\r\n  )\r\n}\r\n\r\nexport default Component\r\n","import CssBaseline from '@material-ui/core/CssBaseline'\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from '../store'\nimport LoadingPage from './LoadingPage'\nimport { getRouteTemplate, Route, Router, RouteType, Switch } from './Router'\n\n// Lazy load pages to improve bundle sizes\nconst HomePage = React.lazy(() => import('./HomePage'))\nconst ChainPage = React.lazy(() => import('./ChainPage'))\nconst BlockPage = React.lazy(() => import('./BlockPage'))\nconst AccountPage = React.lazy(() => import('./AccountPage'))\nconst TransactionPage = React.lazy(() => import('./TransactionPage'))\nconst NotFoundPage = React.lazy(() => import('./NotFoundPage'))\n\nconst App: React.FC = () => (\n  <React.Suspense fallback={<LoadingPage />}>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route\n            exact={true}\n            component={HomePage}\n            path={getRouteTemplate(RouteType.Home)}\n          />\n          <Route\n            exact={true}\n            component={ChainPage}\n            path={getRouteTemplate(RouteType.Chain)}\n          />\n          <Route\n            exact={true}\n            component={BlockPage}\n            path={getRouteTemplate(RouteType.Block)}\n          />\n          <Route\n            component={AccountPage}\n            path={getRouteTemplate(RouteType.Account)}\n          />\n          <Route\n            component={TransactionPage}\n            path={getRouteTemplate(RouteType.Transaction)}\n          />\n          <Route component={NotFoundPage} />\n        </Switch>\n        <CssBaseline />\n      </Router>\n    </Provider>\n  </React.Suspense>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'typeface-roboto'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif (process.env.NODE_ENV === 'production') {\n  serviceWorker.register()\n} else {\n  serviceWorker.unregister()\n}\n"],"sourceRoot":""}